source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/InitializeCWDModel.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/harvestingCWD.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/harvestingCWD.R", echo=TRUE)
harvest.data[,4] = c(1, 3, 0, 0, 1, 0, 1, 0)
harvest.data = harvest.test[[2]]
harvest.data[,4] = c(1, 3, 0, 0, 1, 0, 1, 0)
harvest.data[,5] = c(1, 1, 2, 4, 0, 1, 1, 0)
harvest.data
testing.rate = 0.9
true.pos = 0.9
true.neg = 0.1
true.neg = 0.8
#testing
num.classes = colSums(harvest.data[,3:5])
deer.in.samp = rep(c("S", "E", "I"), num.classes)
S.in.samp = rep(harvest.data[,2], harvest.data[,3])
E.in.samp = rep(harvest.data[,2], harvest.data[,4])
I.in.samp = rep(harvest.data[,2], harvest.data[,5])
num.tested = ceiling(test.rate*sum(num.classes))
test.rate=00
test.rate=00.9
test.rate
num.tested = ceiling(test.rate*sum(num.classes))
tested.mems = sample(deer.in.samp, num.tested, replace = FALSE)
sum(num.classes)
ceiling(test.rate*sum(num.classes))
S.test = length(which(tested.mems == "S"))
E.test= length(which(tested.mems == "E"))
I.test = length(which(tested.mems == "I"))
S.test.loc = sample(S.in.samp, S.test, replace = FALSE)
E.test.loc = sample(E.in.samp, E.test, replace = FALSE)
I.test.loc = sample(I.in.samp, I.test, replace = FALSE)
S.test.neg = rbinom(1, S.test, true.neg)
S.false.pos = S.test - S.test.neg
E.test.pos = rbinom(1, E.test, true.pos)
E.false.neg = E.test - E.test.pos
I.test.pos = rbinom(1, I.test, true.pos)
I.false.neg = I.test - I.test.pos
S.test.neg
S.test
S.false.pos
E.test.pos
E.test.neg
num.classes = colSums(harvest.data[,3:5])
deer.in.samp = rep(c("S", "E", "I"), num.classes)
S.in.samp = rep(harvest.data[,2], harvest.data[,3])
E.in.samp = rep(harvest.data[,2], harvest.data[,4])
I.in.samp = rep(harvest.data[,2], harvest.data[,5])
num.tested = ceiling(test.rate*sum(num.classes))
tested.mems = sample(deer.in.samp, num.tested, replace = FALSE)
S.test = length(which(tested.mems == "S"))
E.test= length(which(tested.mems == "E"))
I.test = length(which(tested.mems == "I"))
S.test.loc = sample(S.in.samp, S.test, replace = FALSE)
E.test.loc = sample(E.in.samp, E.test, replace = FALSE)
I.test.loc = sample(I.in.samp, I.test, replace = FALSE)
S.test.neg = rbinom(1, S.test, true.neg)
S.false.pos = S.test - S.test.neg
E.test.pos = rbinom(1, E.test, true.pos)
E.false.neg = E.test - E.test.pos
I.test.pos = rbinom(1, I.test, true.pos)
I.false.neg = I.test - I.test.pos
S.FP.loc = sample(S.test.loc, S.false.pos, replace = FALSE)
E.TP.loc = sample(E.test.loc, E.test.pos, replace = FALSE)
I.TP.loc = sample(I.test.loc, I.test.pos, replace = FALSE)
SS.locs = table(c(S.FP.loc, E.TP.loc, I.TP.loc))
SS.locs
SS.locs = data.frame(tested.pos.locs)
tested.pos.locs = table(c(S.FP.loc, E.TP.loc, I.TP.loc))
SS.locs = data.frame(tested.pos.locs)
SS.locs
names(SS.locs = c("grid.id", "pos.num"))
SS.locs = data.frame(tested.pos.locs)
names(SS.locs = c("grid.id", "pos.num"))
names(SS.locs) = c("grid.id", "pos.num")
return(SS.locs)
SS.locs
harvest.data
