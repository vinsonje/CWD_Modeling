source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/parms_table.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/parms_table.R", echo=TRUE)
all.parm.names
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/parms_table.R", echo=TRUE)
setwd("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up")
setwd("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up")
setwd("~/")
setwd("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up")
setwd("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up")
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/harvestingCWD.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
n_sim = 10000           # for the initial dataset
xx = runif(n_sim)*grid.xmax     # predictor values
coefficients = c(0.98, -1.9128) # my assumption
prob = 1/(1 + exp(-(coefficients[1] + coefficients[2] * xx)))
yy = (runif(n_sim) < prob)*1
F2 = glm(yy ~ xx, family = "binomial")
F2_int = F2$coef[[1]]
F2_B = F2$coef[[2]]
F2
plot(xx, prob)
plot(xx,yy)
n_sim = 10000           # for the initial dataset
xx = runif(n_sim)*grid.xmax     # predictor values
coefficients = c(0.98, -2.3) # my assumption
prob = 1/(1 + exp(-(coefficients[1] + coefficients[2] * xx)))
yy = (runif(n_sim) < prob)*1
F2 = glm(yy ~ xx, family = "binomial")
F2_int = F2$coef[[1]]
F2_B = F2$coef[[2]]
plot(xx,yy)
plot(xx, prob)
n_sim = 10000           # for the initial dataset
xx = runif(n_sim)*grid.xmax     # predictor values
coefficients = c(0.98, -1.9128) # my assumption
prob = 1/(1 + exp(-(coefficients[1] + coefficients[2] * xx)))
yy = (runif(n_sim) < prob)*1
F2 = glm(yy ~ xx, family = "binomial")
xx.test = runif(n_sim)*grid.xmax
predict(F2, newdata = data.frame(xx = xx.test))
F2.test =predict(F2, newdata = data.frame(xx = xx.test))
plot(xx.test, F2.test)
F2.test = exp(predict(F2, newdata = data.frame(xx = xx.test)))
F2_int = F2$coef[[1]]
plot(xx.test, F2.test)
F2.test = predict(F2, newdata = data.frame(xx = xx.test), type = "response")
plot(xx.test, F2.test)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
dim(pop)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
dim(pop)
ggplot() + geom_point(aes(x = pop[,5], y = pop[,6], color = pop[,1])) +
# geom_text(aes(x = grid[,6], y = grid[,7], label=grid[,1]), alpha=0.75, color="#997009", size = 3.0) +
geom_point(aes(x = tail(pop[,5], 1), y = tail(pop[,6], 1)), shape = 17, size = 3, color = "#FF69B4") +
theme_cowplot() + ylab("Y (km)") + xlab("X (km)") +
scale_color_gradient(name = "family size", low = "#009b00", high = "#002000")
sim_output = oneru
sim_output = onerun
sim_output[[1]]
N.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[1]]))
N.plot
N.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[1]])) + theme_cowplot() +
xlab("time") + ylab("total population size")
N.plot
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]])) +
geom_line(aes(x = 1:thyme, sim_output[[3]])) +
geom_line(aes(x = 1:thyme, sim_output[[4]])) +
theme_cowplot() + xlab("time") + ylab("total population size")
SEI.plot
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]])) +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]])) +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]])) +
theme_cowplot() + xlab("time") + ylab("total population size")
SEI.plot
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]]), color = "black") +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]]), color = "darkgreen") +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]]), color = "firebrick") +
theme_cowplot() + xlab("time") + ylab("total population size")
SEI.plot
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]]), color = "black", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]]), color = "darkgreen") +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]]), color = "firebrick") +
theme_cowplot() + xlab("time") + ylab("total population size")
SEI.plot
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]]), color = "black", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]]), color = "darkgreen", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]]), color = "firebrick", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("total population size")
SEI.plot
spread.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[9]][,1]), color = "black", lwd = 2.0)
spread.plot
incidence.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[11]]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("spread (KM)")
incidence.plot
harvest.data = sim_output[[12]]
head(harvest.data)
harvest.dates = unique(havest.data$time)
harvest.dates = unique(harvest.data$time)
harvest.dates = unique(harvest.data[,1])
harvest.dates
subset(harvest.data, harvest.data[,1] == 10)
h.out = matrix(ncol = 2)
harvest.dates = unique(harvest.data[,1])
h.out = matrix(ncol = 2)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.sum = sum(h.sub[,3:5])
h.out[,i] = c(harvest.dates[i], h.sum)
}
harvest.dates = unique(harvest.data[,1])
h.out = matrix(ncol = 2)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.sum)
}
harvest.dates = unique(harvest.data[,1])
h.out = matrix(nrow = length(harvest.dates), ncol = 2)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.sum)
}
h.out
harvest.data = sim_output[[12]]
#YOURE WORKING ON CREATING A MATRIX TO LOOK AT HARVESTED S, E, I AND TOTAL
harvest.dates = unique(harvest.data[,1])
h.out = matrix(nrow = length(harvest.dates), ncol = 5)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.colsums = colSums(h.sub[,3:5])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.colsums, h.sum)
}
h.out
harvest.plot = ggplot() + geom_bar(aes(x = h.out[,1], y = h.out[,5]))
harvest.plot
harvest.plot = ggplot() + geom_col(aes(x = h.out[,1], y = h.out[,5]))
harvest.plot
h.out = as.data.frame(h.out)
h.out
h.out = as.data.frame(h.out)
names(h.out) = c("time", "S", "E", "I", "N")
h.tall = gather(h.out, key = "status", value = "number", S:I)
harvest.data = sim_output[[12]]
harvest.dates = unique(harvest.data[,1])
h.out = matrix(nrow = length(harvest.dates), ncol = 5)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.colsums = colSums(h.sub[,3:5])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.colsums, h.sum)
}
h.out = as.data.frame(h.out)
names(h.out) = c("time", "S", "E", "I", "N")
h.tall = gather(h.out, key = "status", value = "number", S:I)
h.tall
harvest.plot = ggplot() + geom_col(aes(x = time, y = number, fill = status))
harvest.plot
harvest.plot = ggplot(h.tall) + geom_col(aes(x = time, y = number, fill = status))
harvest.plot
harvest.plot = ggplot(h.tall) + geom_col(aes(x = time, y = number, fill = status)) +
theme_cowplot() + xlim(0, thyme)
harvest.plot
surv.data = sim_output[[13]]
surv.plot = ggplot()
surv.data
surv.data = sim_output[[13]]
?aggregate
surv.counts = aggregate(surv.data, ~result, sum)
surv.counts = aggregate(surv.data, num~result, sum)
surv.counts
?is.null
surv.yearly
surv.yearly = NULL
is.null(surv.yearly)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/SimulateOneRunCWD.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
sim_output = onerun
surv.data = sim_output[[13]]
surv.data
surv.counts = aggregate(surv.data, num~result+time, sum)
surv.counts
surv.data = sim_output[[13]]
surv.counts = aggregate(surv.data, num~result+time, sum)
surv.plot = ggplot(surv.counts) + geom_col(aes(x = time, y = num, fill = result)) +
theme_cowplot() + xlim(0, thyme)
surv.plot
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
sim_output = onerun
ss.data = sim_output[[14]]
ss.data
ss.data = sim_output[[14]]
ss.counts = aggregate(ss.data, num.rem~time, sum)
ss.plot = ggplot(ss.counts) + geom_col(aes(x = time, y = num.rem))
ss.plot
ss.plot = ggplot(ss.counts) + geom_col(aes(x = time, y = num.rem)) +
theme_cowplot() + xlim(0, thyme)
ss.plot
?grid.arrange
N.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[1]])) + theme_cowplot() +
xlab("time") + ylab("total population size")
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]]), color = "black", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]]), color = "darkgreen", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]]), color = "firebrick", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("proportion of population")
spread.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[9]][,1]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("spread (KM)")
incidence.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[11]]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("incidence")
harvest.data = sim_output[[12]]
harvest.dates = unique(harvest.data[,1])
h.out = matrix(nrow = length(harvest.dates), ncol = 5)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.colsums = colSums(h.sub[,3:5])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.colsums, h.sum)
}
h.out = as.data.frame(h.out)
names(h.out) = c("time", "S", "E", "I", "N")
h.tall = gather(h.out, key = "status", value = "number", S:I)
harvest.plot = ggplot(h.tall) + geom_col(aes(x = time, y = number, fill = status)) +
theme_cowplot() + xlim(0, thyme)
surv.data = sim_output[[13]]
surv.counts = aggregate(surv.data, num~result+time, sum)
surv.plot = ggplot(surv.counts) + geom_col(aes(x = time, y = num, fill = result)) +
theme_cowplot() + xlim(0, thyme)
ss.data = sim_output[[14]]
ss.counts = aggregate(ss.data, num.rem~time, sum)
ss.plot = ggplot(ss.counts) + geom_col(aes(x = time, y = num.rem)) +
theme_cowplot() + xlim(0, thyme)
grid.arrange(N.plot, SEI.plot,
spread.plot, incidence.plot,
harvest.plot, surv.plot,
ss.plot)
grid.arrange(N.plot, SEI.plot,
spread.plot, incidence.plot,
harvest.plot, surv.plot,
ss.plot,
ncol = 2, nrow = 1, newpage = TRUE)
grid.arrange(N.plot, SEI.plot,
spread.plot, incidence.plot,
harvest.plot, surv.plot,
ss.plot,
ncol = 2, nrow = 1)
marrangeGrob()
?marrangeGrob
p.list = list(N.plot, SEI.plot,
spread.plot, incidence.plot,
harvest.plot, surv.plot,
ss.plot)
marrangeGrob(p.list, ncol = 2, nrow = 1,
newpage = TRUE)
marrangeGrob(p.list, ncol = 2, nrow = 1)
grid.arrange(p.list[[1:2]], ncol = 2, nrow = 1)
grid.arrange(N.plot, SEI.plot, ncol = 2, nrow = 1)
N.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[1]]), lwd = 2.0) + theme_cowplot() +
xlab("time") + ylab("total population size")
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]]), color = "black", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]]), color = "darkgreen", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]]), color = "firebrick", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("proportion of population")
spread.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[9]][,1]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("spread (KM)")
incidence.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[11]]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("incidence")
harvest.data = sim_output[[12]]
harvest.dates = unique(harvest.data[,1])
h.out = matrix(nrow = length(harvest.dates), ncol = 5)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.colsums = colSums(h.sub[,3:5])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.colsums, h.sum)
}
h.out = as.data.frame(h.out)
names(h.out) = c("time", "S", "E", "I", "N")
h.tall = gather(h.out, key = "status", value = "number", S:I)
harvest.plot = ggplot(h.tall) + geom_col(aes(x = time, y = number, fill = status)) +
theme_cowplot() + xlim(0, thyme)
surv.data = sim_output[[13]]
surv.counts = aggregate(surv.data, num~result+time, sum)
surv.plot = ggplot(surv.counts) + geom_col(aes(x = time, y = num, fill = result)) +
theme_cowplot() + xlim(0, thyme)
ss.data = sim_output[[14]]
ss.counts = aggregate(ss.data, num.rem~time, sum)
ss.plot = ggplot(ss.counts) + geom_col(aes(x = time, y = num.rem)) +
theme_cowplot() + xlim(0, thyme)
p.list = list(N.plot, SEI.plot,
spread.plot, incidence.plot,
harvest.plot, surv.plot,
ss.plot)
grid.arrange(N.plot, SEI.plot, ncol = 2, nrow = 1)
grid.arrange(spread, plot, ncol = 2, nrow = 1)
grid.arrange(spread, incidence.plot, ncol = 2, nrow = 1)
grid.arrange(N.plot, SEI.plot, ncol = 2, nrow = 1)
grid.arrange(spread.plot, incidence.plot, ncol = 2, nrow = 1)
grid.arrange(N.plot, SEI.plot, ncol = 2, nrow = 1)
grid.arrange(spread.plot, incidence.plot, ncol = 2, nrow = 1)
grid.arrange(harvest.plot, surv.plot, ncol = 2, nrow = 1)
grid.arrange(ss.plot, ncol = 2, nrow = 1)
N.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[1]]), lwd = 2.0) + theme_cowplot() +
xlab("time") + ylab("total population size")
SEI.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[2]]/sim_output[[1]]), color = "black", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[3]]/sim_output[[1]]), color = "darkgreen", lwd = 2.0) +
geom_line(aes(x = 1:thyme, sim_output[[4]]/sim_output[[1]]), color = "firebrick", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("proportion of population")
spread.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[9]][,1]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("spread (KM)")
incidence.plot = ggplot() + geom_line(aes(x = 1:thyme, sim_output[[11]]), color = "black", lwd = 2.0) +
theme_cowplot() + xlab("time") + ylab("incidence")
harvest.data = sim_output[[12]]
harvest.dates = unique(harvest.data[,1])
h.out = matrix(nrow = length(harvest.dates), ncol = 5)
for(i in 1:length(harvest.dates)){
h.sub = subset(harvest.data, harvest.data[,1] == harvest.dates[i])
h.colsums = colSums(h.sub[,3:5])
h.sum = sum(h.sub[,3:5])
h.out[i,] = c(harvest.dates[i], h.colsums, h.sum)
}
h.out = as.data.frame(h.out)
names(h.out) = c("time", "S", "E", "I", "N")
h.tall = gather(h.out, key = "status", value = "number", S:I)
harvest.plot = ggplot(h.tall) + geom_col(aes(x = time, y = number, fill = status)) +
theme_cowplot() + xlim(0, thyme) +
ylab("number harvested")
surv.data = sim_output[[13]]
surv.counts = aggregate(surv.data, num~result+time, sum)
surv.plot = ggplot(surv.counts) + geom_col(aes(x = time, y = num, fill = result)) +
theme_cowplot() + xlim(0, thyme) +
ylab("number detected")
ss.data = sim_output[[14]]
ss.counts = aggregate(ss.data, num.rem~time, sum)
ss.plot = ggplot(ss.counts) + geom_col(aes(x = time, y = num.rem)) +
theme_cowplot() + xlim(0, thyme) +
ylab("sharpshoot removed")
p.list = list(N.plot, SEI.plot,
spread.plot, incidence.plot,
harvest.plot, surv.plot,
ss.plot)
grid.arrange(N.plot, SEI.plot, ncol = 2, nrow = 1)
grid.arrange(spread.plot, incidence.plot, ncol = 2, nrow = 1)
grid.arrange(harvest.plot, surv.plot, ncol = 2, nrow = 1)
grid.arrange(ss.plot, ncol = 2, nrow = 1)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
min(w.prop)
w.prop
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
mean(mean.time)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_demorates.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
fn_i = N0/fs #Get the initializing number of families
fn_i
cells
cells = 400
fn_i/cells
cells
rbinom(cells, 1, fn_i/cells)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
fn_i = max(N0/fs, 1)
fn_1
fn_i
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
