##########################
######## Movement ########
##########################
print("starting movement")
pop = FastMovementCWD(pop, centroids, shift, inc)
###############################
######## State Changes ########
###############################
print("starting state changes")
#births, natural deaths, disease state changes (exposure, infection, recovery, death), carcass decay
st.list = StateChangesCWD(pop, centroids, cells,
Pbd,
B1, F1, F2,
B1P.m, B1P.inter,
K, lifespan, lat.period, inf.period,
Incidence, BB, i,
landscape.prions)
pop = st.list[[1]]
Incidence = st.list[[2]]
BB = st.list[[3]]
################################
####### Shedding ###############
################################
print("starting shedding")
landscape.prions = shedCWD(pop, landscape.prions, shed)
################################
####### Corpse Burst ###########
################################
print("starting corpse burst")
corpse.burst.out = corpse_burstCWD(pop, landscape.prions, corpse.burst)
pop = corpse.burst.out[[1]]
landscape.prions = corpse.burst.out[[2]]
################################
####### Removal of prions #######
################################
print("starting prions removal")
landscape.prions = prion.removal(landscape.prions, prion.lifespan)
##############################
######### Harvesting #########
##############################
print("starting harvesting")
harvest.event.out = harvestingCWD(pop, centroids, h.permits, h.times, h.radius, h.num, i)
pop = harvest.event.out[[1]]
harvest.out = rbind(harvest.out, harvest.event.out[[2]])
harvest.yearly = rbind(harvest.yearly, harvest.event.out[[2]])
##############################
######### Surveillance #######
##############################
print("starting surveillance")
surv.event.out = surveillance.fun(harvest.yearly, test.rate, true.pos.E, true.pos.I, true.neg, sur.start, i)
surv.yearly = rbind(surv.yearly, surv.event.out[[1]])
harvest.yearly = surv.event.out[[2]]
surv.out = rbind(surv.out, surv.event.out[[1]])
###############################
#### Sharpshooting ############
###############################
print("starting sharpshooting")
SS.event.out = sharpshootingCWD(pop, centroids, surv.yearly, ss.shooters, ss.times, ss.radius, ss.eff, ss.strat, i)
pop = SS.event.out[[1]]
surv.yearly = SS.event.out[[2]]
SS.out = rbind(SS.out, SS.event.out[[3]])
################################
###########Summarize############
################################
print("Summarizing")
summary.pop = summarizeCWD(pop, track.pop, i)
Ssums[i,] = summary.pop[[1]]
Esums[i,] = summary.pop[[2]]
Isums[i,] = summary.pop[[3]]
Scells[i,] = summary.pop[[4]]
Ecells[i,] = summary.pop[[5]]
Icells[i,] = summary.pop[[6]]
I_locs[[i]] = summary.pop[[7]]
Spread[i,] = summary.pop[[8]]
Nall[i,] = summary.pop[[9]]
pop.out = rbind(pop.out, summary.pop[[10]])
landscape.prions.temp = data.frame(landscape.prions, time = rep(i, dim(landscape.prions)[1]))
landscape.prions.out = rbind(landscape.prions.out, landscape.prions.temp)
}else{print("Exiting loop, no infections")} #if any infected closing bracket/else
} #for timestep closing bracket
pop
dim(pop)
dim(pop.out)
track.pop
source(paste(getwd(), "/CWDParms.R", sep = ''))
#determine cells
cells = dim(centroids)[1]
###########################################
####### Initialize Tracked Objects ########
###########################################
#track total abundance
Nall = matrix(0, nrow = thyme)
Nall[1] = sum(pop[,1])
#track births
BB = matrix(0, nrow = thyme)
#number of infected cells, area of infection, max distance between any two cases
Spread = matrix(0, nrow = thyme, ncol = 3)
#store new cases for each time step
Incidence = matrix(0, nrow = thyme)
Incidence[1] = I0
#track the locations of cells with I
I_locs = vector("list", thyme)
I_locs[1:thyme] = NA
#track the number of SEI individuals
Ssums = matrix(0, nrow = thyme, ncol = 1)
Esums = matrix(0, nrow = thyme, ncol = 1)
Isums = matrix(0, nrow = thyme)
#track the number of cells with SEI individuals
Scells = matrix(0, nrow = thyme, ncol = 1)
Ecells = matrix(0, nrow = thyme, ncol = 1)
Icells = matrix(0, nrow = thyme)
#initialize the prions
landscape.prions.out = data.frame(landscape.prions, time = rep(0, dim(landscape.prions)[1]))
#harvest
harvest.out = matrix(0, ncol = 5)
harvest.yearly = matrix(0, ncol = 5)
#total pop data
pop.out = cbind(pop, time = 0)
#surveillence data
surv.out = NULL
surv.yearly = NULL
#SS data
SS.out = NULL
##################################
######## Start simulation ########
##################################
#start the timestep loop
for(i in 1:thyme){
# if (any(pop[, 9, drop=FALSE]!=0|pop[, 10, drop=FALSE]!=0)){
if (any(pop[, 9, drop=FALSE]>-999|pop[, 10, drop=FALSE]>-999)){
print(i)
##########################
######## Movement ########
##########################
print("starting movement")
pop = FastMovementCWD(pop, centroids, shift, inc)
###############################
######## State Changes ########
###############################
print("starting state changes")
#births, natural deaths, disease state changes (exposure, infection, recovery, death), carcass decay
st.list = StateChangesCWD(pop, centroids, cells,
Pbd,
B1, F1, F2,
B1P.m, B1P.inter,
K, lifespan, lat.period, inf.period,
Incidence, BB, i,
landscape.prions)
pop = st.list[[1]]
Incidence = st.list[[2]]
BB = st.list[[3]]
################################
####### Shedding ###############
################################
print("starting shedding")
landscape.prions = shedCWD(pop, landscape.prions, shed)
################################
####### Corpse Burst ###########
################################
print("starting corpse burst")
corpse.burst.out = corpse_burstCWD(pop, landscape.prions, corpse.burst)
pop = corpse.burst.out[[1]]
landscape.prions = corpse.burst.out[[2]]
################################
####### Removal of prions #######
################################
print("starting prions removal")
landscape.prions = prion.removal(landscape.prions, prion.lifespan)
##############################
######### Harvesting #########
##############################
print("starting harvesting")
harvest.event.out = harvestingCWD(pop, centroids, h.permits, h.times, h.radius, h.num, i)
pop = harvest.event.out[[1]]
harvest.out = rbind(harvest.out, harvest.event.out[[2]])
harvest.yearly = rbind(harvest.yearly, harvest.event.out[[2]])
##############################
######### Surveillance #######
##############################
print("starting surveillance")
surv.event.out = surveillance.fun(harvest.yearly, test.rate, true.pos.E, true.pos.I, true.neg, sur.start, i)
surv.yearly = rbind(surv.yearly, surv.event.out[[1]])
harvest.yearly = surv.event.out[[2]]
surv.out = rbind(surv.out, surv.event.out[[1]])
###############################
#### Sharpshooting ############
###############################
print("starting sharpshooting")
SS.event.out = sharpshootingCWD(pop, centroids, surv.yearly, ss.shooters, ss.times, ss.radius, ss.eff, ss.strat, i)
pop = SS.event.out[[1]]
surv.yearly = SS.event.out[[2]]
SS.out = rbind(SS.out, SS.event.out[[3]])
################################
###########Summarize############
################################
print("Summarizing")
summary.pop = summarizeCWD(pop, track.pop, i)
Ssums[i,] = summary.pop[[1]]
Esums[i,] = summary.pop[[2]]
Isums[i,] = summary.pop[[3]]
Scells[i,] = summary.pop[[4]]
Ecells[i,] = summary.pop[[5]]
Icells[i,] = summary.pop[[6]]
I_locs[[i]] = summary.pop[[7]]
Spread[i,] = summary.pop[[8]]
Nall[i,] = summary.pop[[9]]
pop.out = rbind(pop.out, summary.pop[[10]])
landscape.prions.temp = data.frame(landscape.prions, time = rep(i, dim(landscape.prions)[1]))
landscape.prions.out = rbind(landscape.prions.out, landscape.prions.temp)
}else{print("Exiting loop, no infections")} #if any infected closing bracket/else
} #for timestep closing bracket
track.pop = TRUE
source(paste(getwd(), "/CWDParms.R", sep = ''))
#determine cells
cells = dim(centroids)[1]
###########################################
####### Initialize Tracked Objects ########
###########################################
#track total abundance
Nall = matrix(0, nrow = thyme)
Nall[1] = sum(pop[,1])
#track births
BB = matrix(0, nrow = thyme)
#number of infected cells, area of infection, max distance between any two cases
Spread = matrix(0, nrow = thyme, ncol = 3)
#store new cases for each time step
Incidence = matrix(0, nrow = thyme)
Incidence[1] = I0
#track the locations of cells with I
I_locs = vector("list", thyme)
I_locs[1:thyme] = NA
#track the number of SEI individuals
Ssums = matrix(0, nrow = thyme, ncol = 1)
Esums = matrix(0, nrow = thyme, ncol = 1)
Isums = matrix(0, nrow = thyme)
#track the number of cells with SEI individuals
Scells = matrix(0, nrow = thyme, ncol = 1)
Ecells = matrix(0, nrow = thyme, ncol = 1)
Icells = matrix(0, nrow = thyme)
#initialize the prions
landscape.prions.out = data.frame(landscape.prions, time = rep(0, dim(landscape.prions)[1]))
#harvest
harvest.out = matrix(0, ncol = 5)
harvest.yearly = matrix(0, ncol = 5)
#total pop data
pop.out = cbind(pop, time = 0)
#surveillence data
surv.out = NULL
surv.yearly = NULL
#SS data
SS.out = NULL
##################################
######## Start simulation ########
##################################
#start the timestep loop
for(i in 1:thyme){
# if (any(pop[, 9, drop=FALSE]!=0|pop[, 10, drop=FALSE]!=0)){
if (any(pop[, 9, drop=FALSE]>-999|pop[, 10, drop=FALSE]>-999)){
print(i)
##########################
######## Movement ########
##########################
print("starting movement")
pop = FastMovementCWD(pop, centroids, shift, inc)
###############################
######## State Changes ########
###############################
print("starting state changes")
#births, natural deaths, disease state changes (exposure, infection, recovery, death), carcass decay
st.list = StateChangesCWD(pop, centroids, cells,
Pbd,
B1, F1, F2,
B1P.m, B1P.inter,
K, lifespan, lat.period, inf.period,
Incidence, BB, i,
landscape.prions)
pop = st.list[[1]]
Incidence = st.list[[2]]
BB = st.list[[3]]
################################
####### Shedding ###############
################################
print("starting shedding")
landscape.prions = shedCWD(pop, landscape.prions, shed)
################################
####### Corpse Burst ###########
################################
print("starting corpse burst")
corpse.burst.out = corpse_burstCWD(pop, landscape.prions, corpse.burst)
pop = corpse.burst.out[[1]]
landscape.prions = corpse.burst.out[[2]]
################################
####### Removal of prions #######
################################
print("starting prions removal")
landscape.prions = prion.removal(landscape.prions, prion.lifespan)
##############################
######### Harvesting #########
##############################
print("starting harvesting")
harvest.event.out = harvestingCWD(pop, centroids, h.permits, h.times, h.radius, h.num, i)
pop = harvest.event.out[[1]]
harvest.out = rbind(harvest.out, harvest.event.out[[2]])
harvest.yearly = rbind(harvest.yearly, harvest.event.out[[2]])
##############################
######### Surveillance #######
##############################
print("starting surveillance")
surv.event.out = surveillance.fun(harvest.yearly, test.rate, true.pos.E, true.pos.I, true.neg, sur.start, i)
surv.yearly = rbind(surv.yearly, surv.event.out[[1]])
harvest.yearly = surv.event.out[[2]]
surv.out = rbind(surv.out, surv.event.out[[1]])
###############################
#### Sharpshooting ############
###############################
print("starting sharpshooting")
SS.event.out = sharpshootingCWD(pop, centroids, surv.yearly, ss.shooters, ss.times, ss.radius, ss.eff, ss.strat, i)
pop = SS.event.out[[1]]
surv.yearly = SS.event.out[[2]]
SS.out = rbind(SS.out, SS.event.out[[3]])
################################
###########Summarize############
################################
print("Summarizing")
summary.pop = summarizeCWD(pop, track.pop, i)
Ssums[i,] = summary.pop[[1]]
Esums[i,] = summary.pop[[2]]
Isums[i,] = summary.pop[[3]]
Scells[i,] = summary.pop[[4]]
Ecells[i,] = summary.pop[[5]]
Icells[i,] = summary.pop[[6]]
I_locs[[i]] = summary.pop[[7]]
Spread[i,] = summary.pop[[8]]
Nall[i,] = summary.pop[[9]]
pop.out = rbind(pop.out, summary.pop[[10]])
landscape.prions.temp = data.frame(landscape.prions, time = rep(i, dim(landscape.prions)[1]))
landscape.prions.out = rbind(landscape.prions.out, landscape.prions.temp)
}else{print("Exiting loop, no infections")} #if any infected closing bracket/else
} #for timestep closing bracket
i
harvest.yearly
harvest.out
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/SimulateOneRunCWD.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/SimulateOneRunCWD.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source(paste(getwd(), "/CWDSourcer.R", sep = ''))
init.model = init.CWD()
pop = init.model[[1]]
landscape.prions = init.model[[2]]
centroids = init.model[[3]]
#load in parmeters
source(paste(getwd(), "/CWDParms.R", sep = ''))
#determine cells
cells = dim(centroids)[1]
###########################################
####### Initialize Tracked Objects ########
###########################################
#track total abundance
Nall = matrix(0, nrow = thyme)
Nall[1] = sum(pop[,1])
#track births
BB = matrix(0, nrow = thyme)
#number of infected cells, area of infection, max distance between any two cases
Spread = matrix(0, nrow = thyme, ncol = 3)
#store new cases for each time step
Incidence = matrix(0, nrow = thyme)
Incidence[1] = I0
#track the locations of cells with I
I_locs = vector("list", thyme)
I_locs[1:thyme] = NA
#track the number of SEI individuals
Ssums = matrix(0, nrow = thyme, ncol = 1)
Esums = matrix(0, nrow = thyme, ncol = 1)
Isums = matrix(0, nrow = thyme)
#track the number of cells with SEI individuals
Scells = matrix(0, nrow = thyme, ncol = 1)
Ecells = matrix(0, nrow = thyme, ncol = 1)
Icells = matrix(0, nrow = thyme)
#initialize the prions
landscape.prions.out = data.frame(landscape.prions, time = rep(0, dim(landscape.prions)[1]))
#harvest
harvest.out = matrix(0, ncol = 5)
harvest.yearly = matrix(0, ncol = 5)
#total pop data
pop.out = cbind(pop, time = 0)
#surveillence data
surv.out = NULL
surv.yearly = NULL
#SS data
SS.out = NULL
i = 35
print(i)
##########################
######## Movement ########
##########################
print("starting movement")
pop = FastMovementCWD(pop, centroids, shift, inc)
###############################
######## State Changes ########
###############################
print("starting state changes")
#births, natural deaths, disease state changes (exposure, infection, recovery, death), carcass decay
st.list = StateChangesCWD(pop, centroids, cells,
Pbd,
B1, F1, F2,
B1P.m, B1P.inter,
K, lifespan, lat.period, inf.period,
Incidence, BB, i,
landscape.prions)
pop = st.list[[1]]
Incidence = st.list[[2]]
BB = st.list[[3]]
################################
####### Shedding ###############
################################
print("starting shedding")
landscape.prions = shedCWD(pop, landscape.prions, shed)
################################
####### Corpse Burst ###########
################################
print("starting corpse burst")
corpse.burst.out = corpse_burstCWD(pop, landscape.prions, corpse.burst)
pop = corpse.burst.out[[1]]
landscape.prions = corpse.burst.out[[2]]
################################
####### Removal of prions #######
################################
print("starting prions removal")
landscape.prions = prion.removal(landscape.prions, prion.lifespan)
##############################
######### Harvesting #########
##############################
print("starting harvesting")
harvest.event.out = harvestingCWD(pop, centroids, h.permits, h.times, h.radius, h.num, i)
pop = harvest.event.out[[1]]
harvest.out = rbind(harvest.out, harvest.event.out[[2]])
harvest.yearly = rbind(harvest.yearly, harvest.event.out[[2]])
print(harvest.yearly)
harvest.data = heavest.yearly
harvest.data = harvest.data[-which(harvest.data[,1]==0), , drop = FALSE]
harvest.data
harvest.data = heavest.yearly
harvest.data
harvest.data = harvest.yearly
harvest.data
-which(harvest.data[,1]==0)
harvest.data[-which(harvest.data[,1]==0), , drop = FALSE]
harvest.data = harvest.data[-which(harvest.data[,1]==0), , drop = FALSE]
SS.locs = NULL
harvest.data.out = harvest.data
surv.data.all = NULL
if(thyme %in% sur.start){
#testing
num.classes = colSums(harvest.data[,3:5])
deer.in.samp = rep(c("S", "E", "I"), num.classes)
S.in.samp = rep(harvest.data[,2], harvest.data[,3])
E.in.samp = rep(harvest.data[,2], harvest.data[,4])
I.in.samp = rep(harvest.data[,2], harvest.data[,5])
num.tested = ceiling(test.rate*sum(num.classes))
tested.mems = sample(deer.in.samp, num.tested, replace = FALSE)
S.test = length(which(tested.mems == "S"))
E.test= length(which(tested.mems == "E"))
I.test = length(which(tested.mems == "I"))
S.test.loc = sample(S.in.samp, S.test, replace = FALSE)
E.test.loc = sample(E.in.samp, E.test, replace = FALSE)
I.test.loc = sample(I.in.samp, I.test, replace = FALSE)
S.test.neg = rbinom(1, S.test, true.neg)
S.false.pos = S.test - S.test.neg
E.test.pos = rbinom(1, E.test, true.pos.E)
E.false.neg = E.test - E.test.pos
I.test.pos = rbinom(1, I.test, true.pos.I)
I.false.neg = I.test - I.test.pos
S.FP.loc = sample(S.test.loc, S.false.pos, replace = FALSE)
E.TP.loc = sample(E.test.loc, E.test.pos, replace = FALSE)
I.TP.loc = sample(I.test.loc, I.test.pos, replace = FALSE)
if(length(S.FP.loc)<1){S.FP.loc = 0}
if(length(E.TP.loc)<1){E.TP.loc = 0}
if(length(I.TP.loc)<1){I.TP.loc = 0}
surv.data.all = data.frame(table(rbind(data.frame(loc = S.FP.loc, result = "FP"),
data.frame(loc = E.TP.loc, result = "ETP"),
data.frame(loc = I.TP.loc, result = "ITP"))))
surv.data.all = surv.data.all[-which(surv.data.all[,1] == 0),]
surv.data.all = surv.data.all[-which(surv.data.all[,3] == 0),]
names(surv.data.all) = c("loc", "result", "num")
harvest.data.out = matrix(0, ncol = 5)
}#end if statement for starting surv.
harvest.data.out
harvest.data = harvest.yearly[,1]
harvest.data
harvest.data = harvest.yearly[1,]
harvest.data[-which(harvest.data[,1]==0), , drop = FALSE]
harvest.data
harvest.yearly
surv.event.out = surveillance.fun(harvest.yearly, test.rate, true.pos.E, true.pos.I, true.neg, sur.start, i)
surv.event.out[[2]]
source("~/.active-rstudio-document", echo=TRUE)
thyme
sur.start
thyme %in% sur.start
harvest.data
harvest.data[-which(harvest.data[,1]==0), , drop = FALSE]
harvest.data
harvest.data[2,] = 1:5
harvest.data[2,] = 6:11
harvest.data[3,] = 6:11
harvest.data[2,] = 1:5
harvest.data
harvest.data[2,] = 1:5
harvest.data
harvest.data[2,]
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/SimulateOneRunCWD.R", echo=TRUE)
