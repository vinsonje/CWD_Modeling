source("C:/Users/SIU856560341/Desktop/Metapop Model/InitializeCWDModel.R")
sim_output[[10]]
source("C:/Users/SIU856560341/Desktop/Metapop Model/InitializeCWDModel.R")
sim_output[[10]]
plot.landscape.meta(sim_output)
sim_output[[10]]
#total abundance
p.pop.line = ggplot(sim_output[[10]]) + geom_line(aes(x = time, y = pop))
p.pop.line
#total abundance
p.pop.line = ggplot(sim_output[[10]]) + geom_line(aes(x = time, y = pop)) + theme_cowplot()
p.pop.line
source("C:/Users/SIU856560341/Desktop/Metapop Model/CWD_plots.R")
plot.landscape.meta(sim_output, grid.xmax = grid.xmax, grid.ymax = grid.ymax)
#total abundance
p.pop.line = ggplot(sim_output[[10]]) + geom_line(aes(x = time, y = pop)) + theme_cowplot()
p.ani.pop.line = p.pop.line = transition_reveal(time)
p.pop.line.gif = animate(p.ani.pop.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
p.inf.line.gif = animate(p.ani.inf.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
rlang::last_trace()
p.ani.pop.line = p.pop.line + transition_reveal(time)
#total abundance
p.pop.line = ggplot(sim_output[[10]]) + geom_line(aes(x = time, y = pop)) + theme_cowplot()
p.ani.pop.line = p.pop.line + transition_reveal(time)
p.pop.line.gif = animate(p.ani.pop.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
gif.time = 10
gif.fps = 20
p.pop.line.gif = animate(p.ani.pop.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
#Prion Heatmap
p.prions = ggplot() + geom_tile(data = data.frame(sim_output[[9]]), aes(x = cent.x, y = cent.y, fill = prions)) +
theme_cowplot() + scale_fill_gradient(low = "white", high = "red")
#Plot where infectious are through time
I.loc.list = sim_output[[6]]
I.loc.df = data.frame()
for(j in 1:length(I.loc.list)){
I.loc = unlist(I.loc.list[j])
time = rep(j, length(I.loc))
I.loc.temp = data.frame(time = as.integer(time), I.loc = I.loc)
I.loc.df = rbind(I.loc.df, I.loc.temp)
}
I.loc.table = table(I.loc.df)
I.loc.df2 = as.data.frame(I.loc.table)
names(I.loc.df2) = c("time", "grid.id", "num")
I.loc.df2 = I.loc.df2[-which(I.loc.df2$num==0),]
x.loc.temp = NULL
y.loc.temp = NULL
for(i in 1:dim(I.loc.df2)[1]){
I.loc.grid.id = as.numeric(as.character(I.loc.df2$grid.id[i]))
x.loc.temp = c(x.loc.temp, centroids$cent.x[I.loc.grid.id])
y.loc.temp = c(y.loc.temp, centroids$cent.y[I.loc.grid.id])
}
I.loc.df.final = data.frame(I.loc.df2, x.loc = x.loc.temp, y.loc = y.loc.temp)
I.loc.df.final = I.loc.df.final[order(I.loc.df.final$time),]
I.loc.df.final$time = as.numeric(I.loc.df.final$time)
p.inf = ggplot() + geom_tile(data = I.loc.df.final, aes(x = x.loc, y = y.loc, fill = num)) +
theme_cowplot() + scale_fill_gradient(low = "white", high = "blue")
#Infection Abundance
I.time = data.frame(time = 1:length(sim_output[8]$Isums), I = sim_output[8]$Isums)
p.inf.line = ggplot(I.time) + geom_line(aes(x = time, y = I), color="black") + theme_cowplot()
#total abundance
p.pop.line = ggplot(sim_output[[10]]) + geom_line(aes(x = time, y = pop)) + theme_cowplot()
p.ani.prions = p.prions + transition_time(time) + labs(title = "Time: {frame_time}")
p.ani.inf = p.inf + transition_time(time) + labs(title = "Time: {frame_time}")
p.ani.inf.line = p.inf.line + transition_reveal(time)
p.ani.pop.line = p.pop.line + transition_reveal(time)
p.prions.gif = animate(p.ani.prions, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, width = 400, height = 400, renderer = gifski_renderer())
p.inf.gif = animate(p.ani.inf, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps,  width = 400, height = 400, renderer = gifski_renderer())
p.inf.line.gif = animate(p.ani.inf.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
p.pop.line.gif = animate(p.ani.pop.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
p.prions.gif.read = image_read(p.prions.gif)
p.inf.gif.read = image_read(p.inf.gif)
p.inf.line.gif.read = image_read(p.inf.line.gif)
p.pop.line.gif.read = image_read(p.pop.line.gif)
new_gif = image_append(c(p.prions.gif.read[1], p.inf.gif.read[1]))
for(i in 2:(gif.time*gif.fps)){
print(i)
combined = image_append(c(p.prions.gif.read[i], p.inf.gif.read[i]))
new_gif = c(new_gif, combined)
}
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = TRUE)
for(i in 2:(gif.time*gif.fps)){
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
pop.inf.line.gif.read
p.inf.line.gif.read
p.pop.line.gif.read
new_gif
p.inf.line.gif = animate(p.ani.inf.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
p.pop.line.gif = animate(p.ani.pop.line, duration = gif.time, fps = gif.fps, nframes = gif.time*gif.fps, detail = gif.fps, width = 400, height = 400, renderer = gifski_renderer())
p.inf.line.gif.read = image_read(p.inf.line.gif)
p.pop.line.gif.read = image_read(p.pop.line.gif)
p.pop.line.gif.read
p.inf.line.gif.read
dim(p.pop.line.gif.read)
length(p.pop.line.gif.read)
length(p.inf.line.gif.read)
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = TRUE)
for(i in 2:max(length(p.pop.line.gif.read), length(p.inf.gif.read))){
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.gif.read))){
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = TRUE)
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.gif.read))){
i
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = TRUE)
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.gif.read))){
i
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.gif.read))){
print(i)
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
min(length(p.pop.line.gif.read), length(p.inf.gif.read))
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = TRUE)
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.line.gif.read))){
print(i)
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = TRUE)
new_gif2 = c(new_gif2, combined)
}
print(new_gif2)
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = FALSE)
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.line.gif.read))){
print(i)
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = FALSE)
new_gif2 = c(new_gif2, combined)
}
print(new_gif2)
new_gif = image_append(c(p.prions.gif.read[1], p.inf.gif.read[1]))
for(i in 2:(gif.time*gif.fps)){
print(i)
combined = image_append(c(p.prions.gif.read[i], p.inf.gif.read[i]))
new_gif = c(new_gif, combined)
}
new_gif2 = image_append(c(p.pop.line.gif.read[1], p.inf.line.gif.read[1]), stack = FALSE)
for(i in 2:min(length(p.pop.line.gif.read), length(p.inf.line.gif.read))){
print(i)
combined = image_append(c(p.pop.line.gif.read[i], p.inf.line.gif.read[i]), stack = FALSE)
new_gif2 = c(new_gif2, combined)
}
new_gif3 = image_append(c(new_gif[1], new_gif2[1]), stack = TRUE)
for(i in 2:min(length(new_gif), length(new_gif2))){
print(i)
combined = image_append(c(new_gif[i], new_gif2[i]), stack = TRUE)
new_gif3 = c(new_gif2, combined)
}
print(new_gif3)
new_gif3 = image_append(c(new_gif[1], new_gif2[1]), stack = TRUE)
for(i in 2:min(length(new_gif), length(new_gif2))){
print(i)
combined = image_append(c(new_gif[i], new_gif2[i]), stack = TRUE)
new_gif3 = c(new_gif2, combined)
}
print(new_gif3)
new_gif3 = image_append(c(new_gif[1], new_gif2[1]), stack = TRUE)
for(i in 2:min(length(new_gif), length(new_gif2))){
print(i)
combined = image_append(c(new_gif[i], new_gif2[i]), stack = TRUE)
new_gif3 = c(new_gif3, combined)
}
print(new_gif3)
###########################################
######## Initialize Output Objects ########
###########################################
Nall = matrix(nrow = thyme) #track total abundance
BB = matrix(nrow = thyme) #track births
POSlive_locs = as.list(rep(0,thyme))
Spread = matrix(0, nrow = thyme, ncol = 3) #number of infectious individuals, area of infection, max distance between any two cases
Incidence = matrix(0, nrow = thyme) #store new cases for each time step
I_locs = vector("list", thyme)
I_locs[1:thyme] = 0
Itrue = matrix(0, nrow = thyme, ncol = 1)
Isums = matrix(0, nrow = thyme)
out = matrix(c(0, 0, 0), nrow=thyme, ncol=3)
landscape.prions = data.frame(centroids, prions = rep(0, dim(centroids)[1]))
landscape.prions.out = data.frame(landscape.prions, time = rep(0, dim(landscape.prions)[1]))
######################################
######## Initialize Infection ########
######################################
num_inf_0 = I0 #how many individuals to infect starting off
#find the midpoint of the grid
id = which(centroids[, 1] >= midpoint[1] & centroids[, 2] >= midpoint[2])[1] #location on grid closest to midpoint
infected = InitializeFamilies(N0,ss,cells,centroids,num_inf_0,id,1)
infected[,8] = 0
infected[,10] = 1
#combine infected pig with pop matrix
pop = rbind(pop,infected)
#track first infection in Incidence matrix
Incidence[1] = num_inf_0
Nall[1] = sum(pop$fam.size)
##################################
######## Start simulation ########
##################################
#start the timestep loop
i=2
print(i)
#####################################
######## Track I locations ########
#####################################
if(nrow(pop[pop[, 10] > 0, ,drop = FALSE]) > 0){
Isums[i] = nrow(pop[pop[, 10] > 0, , drop = FALSE])
} else{Isums[i] = 0}
if(any(pop[, 10] > 0)){
I_locs[[i]] = rep(pop[pop[, 10] > 0, 3], pop[pop[, 10] > 0, 10])
} else{
I_locs[[i]] = pop[pop[, 10] > 0, 3]
}
pop = as.data.frame(FastMovementCWD(as.matrix(pop), as.matrix(centroids), shift, inc))
###############################
######## State Changes ########
###############################
#births, natural deaths, disease state changes (exposure, infection, recovery, death), carcass decay
st.list = StateChangesCWD(pop, centroids, cells,
Pbd,
B1, B2, F1, F2_int, F2_B,
K, death, Pcr, Pir,
Incidence, BB, i) #You're here, need to make sure the arguments are correct here.
pop = st.list[[1]]
Incidence = st.list[[2]]
BB = st.list[[3]]
pop
################################
####### Shedding ###############
################################
Imat = pop[pop[,10] > 0, , drop = FALSE]
if(dim(Imat)[1]>0){
for(k in 1:dim(Imat)[1]){
prions.shed = rpois(Imat[k,]$I.num, shed)
land.index = intersect(which(landscape.prions$cent.x == Imat[k,]$x.now), which(landscape.prions$cent.y == Imat[k,]$y.now))
landscape.prions[land.index,]$prions = landscape.prions[land.index, ]$prions + sum(prions.shed)
}
}#end of if statement to test if there are any Is
################################
####### Removal of prions#######
################################
for(l in 1:dim(landscape.prions)[1]){
landscape.prions$prions[l] = floor(landscape.prions$prions[l] * 0.25) #this should be a parameter in the model
}
landscape.prions.temp = data.frame(landscape.prions, time = rep(i, dim(landscape.prions)[1]))
landscape.prions.out = rbind(landscape.prions.out, landscape.prions.temp)
#############################
####Track true spatial spread
#############################
#if any infected individuals
if(nrow(pop[pop[, 9, drop = FALSE] > 0 | pop[ , 10, drop = FALSE] > 0, , drop = FALSE]) > 0){
out[i,] = areaOfinfectionCWD(pop, centroids, inc)
} else{out[i,] = c(0,0, 0)}
#############################
####Summarize infections
#############################
#sum all infectious cases (I,C,E) at each timestep
#Itrue = sum(I + C,2); sum of all infectious cases over time
if(i==1){Itrue[i] = num_inf_0}
else{
#############################
####Summarize total population size
#############################
Nall[i] = sum(pop$fam.size)
#comment brackets below for manual testing
}else{print("Exiting loop, no infections")} #if any infected closing bracket/else
#####################################
######## Track I locations ########
#####################################
if(nrow(pop[pop[, 10] > 0, ,drop = FALSE]) > 0){
Isums[i] = nrow(pop[pop[, 10] > 0, , drop = FALSE])
} else{Isums[i] = 0}
if(any(pop[, 10] > 0)){
I_locs[[i]] = rep(pop[pop[, 10] > 0, 3], pop[pop[, 10] > 0, 10])
} else{
I_locs[[i]] = pop[pop[, 10] > 0, 3]
}
pop = as.data.frame(FastMovementCWD(as.matrix(pop), as.matrix(centroids), shift, inc))
###############################
######## State Changes ########
###############################
#births, natural deaths, disease state changes (exposure, infection, recovery, death), carcass decay
st.list = StateChangesCWD(pop, centroids, cells,
Pbd,
B1, B2, F1, F2_int, F2_B,
K, death, Pcr, Pir,
Incidence, BB, i) #You're here, need to make sure the arguments are correct here.
pop = st.list[[1]]
Incidence = st.list[[2]]
BB = st.list[[3]]
pop
max(pop$Z.num)
anim_save("Meta_outbreak", new_gif2
)
anim_save("Meta_outbreak.gif", new_gif2)
anim_save("Meta_outbreak.gif", new_gif3)
?xlim
source("C:/Users/SIU856560341/Desktop/Metapop Model/CWD_plots.R")
source("C:/Users/SIU856560341/Desktop/Metapop Model/InitializeCWDModel.R")
######################
####Set directories
#####################
# setwd("~/Desktop/IBM_files/Metapop Model") #for my Mac
setwd("C:/Users/SIU856560341/Desktop/CWD_Modeling_Metapop Model") #for my PC
######################
####Set directories
#####################
# setwd("~/Desktop/IBM_files/Metapop Model") #for my Mac
setwd("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop Model") #for my PC
